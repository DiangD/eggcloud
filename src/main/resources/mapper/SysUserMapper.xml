<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.qzh.eggcloud.mapper.SysUserMapper">
    <select id="selectSysRoleByUserId" resultType="com.qzh.eggcloud.model.auth.SysRoleEntity">
        select sr.*
        from sys_role sr
                     left join sys_user_role sur on sr.role_id = sur.role_id
        where sur.user_id = #{userId}
    </select>

    <select id="findByUsername" resultType="com.qzh.eggcloud.model.auth.SysUserEntity">
        select *
        from sys_user
        where username = #{username}
        limit 1
    </select>

    <select id="findByEmail" resultType="com.qzh.eggcloud.model.auth.SysUserEntity">
        select *
        from sys_user
        where email = #{email}
        limit 1
    </select>

    <insert id="insertUser" parameterType="SysUserEntity" keyProperty="user.userId" useGeneratedKeys="true">
        insert into sys_user (username, password, email, store_id)
        values (#{user.username}, #{user.password}, #{user.email}, #{user.storeId})
    </insert>

    <update id="updateUser" parameterType="SysUserEntity">
        update sys_user
        <set>
            <if test="user.username != null and user.username != ''">
                username=#{user.username},
            </if>
            <if test="user.password != null and user.password != ''">
                password=#{user.password},
            </if>
            <if test="user.nickname != null and user.nickname != ''">
                nickname = #{user.nickname},
            </if>
            <if test="user.email != null and user.email != ''">
                email=#{user.email},
            </if>
            <if test="user.avatar != null and user.avatar != ''">
                avatar=#{user.avatar},
            </if>
            <if test="user.status != null">
                status=#{user.status},
            </if>
            <if test="user.signature != null and user.signature != ''">
                signature = #{user.signature}
            </if>
        </set>
        where user_id = #{user.userId}
    </update>

    <insert id="insertUserRole">
        insert into sys_user_role(user_id, role_id)
        VALUES (#{userId}, #{roleId})
    </insert>

    <update id="updateAvatar">
        update sys_user
        set avatar = #{avatar}
        where user_id = #{userId}
    </update>

    <select id="findByUserId" resultType="com.qzh.eggcloud.model.auth.SysUserEntity">
        select *
        from sys_user
        where sys_user.user_id = #{userId}
    </select>

    <resultMap id="sysUserDetail" type="SysUserEntity">
        <id property="userId" column="user_id"/>
        <result property="username" column="username"/>
        <result property="password" column="password"/>
        <result property="nickname" column="nickname"/>
        <result property="email" column="email"/>
        <result property="avatar" column="avatar"/>
        <result property="signature" column="signature"/>
        <result property="status" column="status"/>
        <result property="createAt" column="create_at"/>
        <result property="storeId" column="store_id"/>
        <collection property="roles" ofType="com.qzh.eggcloud.model.auth.SysRoleEntity">
            <id property="roleId" column="role_id"/>
            <result property="roleName" column="role_name"/>
        </collection>
    </resultMap>

    <select id="findUserDetailByUser" resultMap="sysUserDetail">
        select u.*, sr.*
        from sys_user u
                     join sys_user_role sur on u.user_id = sur.user_id
                     join sys_role sr on sur.role_id = sr.role_id
        <where>
            <if test="query.userId != null">
                u.user_id = #{query.userId}
            </if>
            <if test="query.username != null and query.username != ''">
                and instr(u.username, #{query.username}) > 0
            </if>
            <if test="query.beginAt != null and query.endAt != null">
                and u.create_at between #{query.beginAt} and #{query.endAt}
            </if>
            <if test="query.roleId != null">
                and sr.role_id = #{query.roleId}
            </if>
        </where>
        order by u.create_at desc
    </select>

    <delete id="deleteUserById">
        delete
        from sys_user
        where user_id = #{userId}
    </delete>

    <delete id="deleteSysRoleUserByUserId">
        delete
        from sys_user_role
        where user_id = #{userId}
    </delete>
</mapper>